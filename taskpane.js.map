{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\n// The Office initialize function must be run each time a new page is loaded.\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Outlook) {\n    document.getElementById(\"submit-to-llm\").onclick = submitEmailToLLM;\n    document.getElementById(\"reply-with-content\").onclick = replyWithLLMContent;\n    document.getElementById(\"discard-response\").onclick = discardLLMResponse;\n  }\n});\n\nlet llmResponseContent = \"\"; // Variable to store the LLM response\n\n/**\n * Calls the Gradio LLM API endpoint.\n * @param {string} emailContent The content of the email to send to the LLM.\n * @returns {Promise<string>} A Promise that resolves with the LLM response.\n */\nasync function callLLMAPI(emailContent) {\n  const statusMessage = document.getElementById(\"status-message\");\n  statusMessage.innerText = \"Analyzing email with AI (calling Gradio)...\";\n\n  // Base URL for your Gradio app\n  const gradioBaseUrl = \"http://localhost:8082\";\n  // The standard Gradio predict endpoint (the client library usually hits this)\n  const predictEndpoint = \"/run/predict\"; \n\n  // For session management, using the Outlook Item ID is a good idea.\n  // Make sure this is available in your Office.onReady context if not already.\n  // For initial testing, you could use a fixed string like \"outlook-addin-session-123\".\n  const sessionId = Office.context.mailbox.item.itemId || \"outlook-addin-session-default\";\n\n  // The 'images' parameter is tricky for file uploads via simple fetch.\n  // For now, we'll send null, mirroring your Node.js example's `images: exampleFile`\n  // if `exampleFile` was not actually provided, or if the model doesn't need it.\n  // If you *do* need to send files, it typically involves FormData, which is more complex.\n  const imagesParameter = null; \n\n  try {\n    const response = await fetch(`${gradioBaseUrl}${predictEndpoint}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      // THIS IS THE CRUCIAL CHANGE:\n      // Construct the body to match the named arguments as seen in the @gradio/client example\n      // and as your Python `chat_response` function expects (session, user_msg, chat_history, images).\n      // The `api_name` is essential to route to the correct Gradio function.\n      body: JSON.stringify({\n        fn_index: 0, // Gradio might use this, though `api_name` is more specific.\n                     // You can find the correct `fn_index` at `http://localhost:8082/api/`\n                     // or remove it if `api_name` is sufficient.\n        data: [\n          sessionId,        // Corresponds to the 'session' argument in your Python function\n          emailContent,     // Corresponds to the 'user_msg' argument in your Python function\n          [],               // Corresponds to the 'chat_history' argument (empty for a new query)\n          imagesParameter   // Corresponds to the 'images' argument (null or an appropriate object)\n        ],\n        // This is the key to target your specific function\n        api_name: \"/chat_response\"\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error(\"Gradio API Error Response:\", errorData);\n      throw new Error(`Gradio API error! Status: ${response.status}, Message: ${errorData.detail || errorData.error || response.statusText}`);\n    }\n\n    const data = await response.json();\n    console.log(\"Gradio API Response:\", data);\n\n    // Gradio's /run/predict endpoint returns results in `data.data` as an array\n    // The outputs from your `chat_response` function are:\n    // `return \"\", chat_display, chat_history, None/gr.update(...), gr.update(...)`\n    // So, `data.data[1]` should be your `chat_display`\n    const chatDisplayOutput = data.data[1]; // Access the `chat_display` output\n    let llmFinalAnswer = \"\";\n\n    if (chatDisplayOutput && chatDisplayOutput.length > 0) {\n      const lastMessage = chatDisplayOutput[chatDisplayOutput.length - 1];\n      if (lastMessage && lastMessage.role === \"assistant\" && lastMessage.content) {\n        llmFinalAnswer = lastMessage.content; // This is the LLM's final decorated response string\n      }\n    } else {\n      throw new Error(\"Gradio API response did not contain expected chat display output.\");\n    }\n\n    statusMessage.innerText = \"\"; // Clear status\n    return llmFinalAnswer; // The LLM response\n\n  } catch (error) {\n    console.error(\"Error calling Gradio LLM API:\", error);\n    statusMessage.innerText = `Error: Could not get AI response from Gradio. Check console for details.`;\n    return `Error: Failed to connect to Gradio AI: ${error.message}`;\n  }\n}\n\n/**\n * Retrieves the email content and sends it to the LLM API.\n */\nasync function submitEmailToLLM() {\n  const llmResponseArea = document.getElementById(\"llm-response-area\");\n  const llmResponseText = document.getElementById(\"llm-response-text\");\n  const statusMessage = document.getElementById(\"status-message\");\n\n  llmResponseArea.style.display = \"none\"; // Hide previous response\n  llmResponseText.value = \"\"; // Clear previous text\n  statusMessage.innerText = \"Fetching email content...\";\n  llmResponseContent = \"\"; // Clear stored response\n\n  if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {\n    // Get the email body as plain text\n    Office.context.mailbox.item.body.getAsync(Office.CoercionType.Text, async function (asyncResult) {\n      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n        const emailBody = asyncResult.value;\n        console.log(\"Email Body Retrieved:\", emailBody);\n\n        try {\n          llmResponseContent = await callLLMAPI(emailBody);\n          llmResponseText.value = llmResponseContent;\n          llmResponseArea.style.display = \"block\"; // Show the response area\n          statusMessage.innerText = \"AI analysis complete.\";\n        } catch (error) {\n          console.error(\"Failed to get LLM response:\", error);\n          llmResponseText.value = \"Error: Could not get AI response.\";\n          llmResponseArea.style.display = \"block\";\n          statusMessage.innerText = \"Error: Failed to get AI response.\";\n        }\n      } else {\n        console.error(\"Error getting email body:\", asyncResult.error);\n        statusMessage.innerText = `Error: Could not retrieve email body. ${asyncResult.error.message}`;\n      }\n    });\n  } else {\n    statusMessage.innerText = \"Please select an email to analyze.\";\n  }\n}\n\n/**\n * Creates a new reply draft with the LLM's generated content.\n */\nfunction replyWithLLMContent() {\n  const item = Office.context.mailbox.item;\n  const statusMessage = document.getElementById(\"status-message\");\n\n  if (!llmResponseContent) {\n    statusMessage.innerText = \"No AI content to reply with.\";\n    return;\n  }\n\n  // Attempt to get the sender's name for a personalized greeting\n  let senderName = \"Recipient\";\n  if (item.itemType === Office.MailboxEnums.ItemType.Message && item.sender && item.sender.displayName) {\n    senderName = item.sender.displayName.split(\" \")[0] || \"Recipient\"; // Just first name\n  }\n\n  // Prepend a greeting and sign-off\n  const fullReplyContent = `Dear ${senderName},\\n\\n${llmResponseContent}\\n\\nBest regards,\\n[Your Name]`;\n\n  // Display a reply form. Outlook handles setting recipients correctly for replies.\n  item.displayReplyForm(\n    {\n      htmlBody: fullReplyContent, // Use htmlBody for rich text, plain text if you prefer\n      subject: `Re: ${item.subject || \"No Subject\"}` // Include original subject\n    },\n    function (asyncResult) {\n      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n        statusMessage.innerText = \"Reply draft created successfully!\";\n        // You might want to hide the LLM response area after a successful reply\n        discardLLMResponse();\n      } else {\n        statusMessage.innerText = `Error creating reply draft: ${asyncResult.error.message}`;\n        console.error(\"Error creating reply draft:\", asyncResult.error);\n      }\n    }\n  );\n}\n\n/**\n * Hides the LLM response area and clears the content.\n */\nfunction discardLLMResponse() {\n  const llmResponseArea = document.getElementById(\"llm-response-area\");\n  const llmResponseText = document.getElementById(\"llm-response-text\");\n  const statusMessage = document.getElementById(\"status-message\");\n\n  llmResponseArea.style.display = \"none\";\n  llmResponseText.value = \"\";\n  llmResponseContent = \"\";\n  statusMessage.innerText = \"Response discarded.\";\n}","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>LLM Email Assistant</title> <link rel=\\\"stylesheet\\\" href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\"/> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> </head> <body> <div id=\\\"app-body\\\"> <div class=\\\"header\\\"> <h1 class=\\\"ms-font-su\\\">LLM Email Assistant</h1> </div> <div class=\\\"content\\\"> <p>Get AI assistance for your emails.</p> <button id=\\\"submit-to-llm\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Analyze Email with LLM</span> </button> <div id=\\\"llm-response-area\\\" style=\\\"display:none\\\"> <h3>AI Response:</h3> <textarea id=\\\"llm-response-text\\\" readonly=\\\"readonly\\\"></textarea> <button id=\\\"reply-with-content\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Reply with this Content</span> </button> <button id=\\\"discard-response\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Discard</span> </button> </div> <div id=\\\"status-message\\\" style=\\\"margin-top:10px\\\"></div> </div> </div> </body> </html>\";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","Office","onReady","info","host","HostType","Outlook","getElementById","onclick","submitEmailToLLM","replyWithLLMContent","discardLLMResponse","llmResponseContent","callLLMAPI","_x","_callLLMAPI","_callee","emailContent","statusMessage","sessionId","response","errorData","data","chatDisplayOutput","llmFinalAnswer","lastMessage","_t","_context","innerText","context","mailbox","item","itemId","fetch","concat","method","headers","body","JSON","stringify","fn_index","api_name","ok","json","console","error","status","detail","statusText","log","role","content","message","_submitEmailToLLM","_callee3","llmResponseArea","llmResponseText","_context3","style","display","itemType","MailboxEnums","ItemType","Message","getAsync","CoercionType","Text","_ref","_callee2","asyncResult","emailBody","_t2","_context2","AsyncResultStatus","Succeeded","_x2","senderName","sender","split","fullReplyContent","displayReplyForm","htmlBody","subject","URL"],"sourceRoot":""}