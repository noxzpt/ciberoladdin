{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global Office */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called.\n});\n\n/**\n * Fetches the email body, calls the LLM, and creates a reply draft with the LLM's response.\n * This function is executed when the \"Perform an action\" button is clicked.\n * @param event {Office.AddinCommands.Event} The event object from Office.\n */\nfunction generateReplyWithLlmResponse(event) {\n  // 1. Show a temporary notification to indicate processing is underway.\n  // This is important because command functions don't have a visible UI.\n  Office.context.mailbox.item.notificationMessages.addAsync(\"llmProcessing\", {\n    type: Office.MailboxNotificationMessageType.InformationalMessage,\n    message: \"Generating reply with AI...\",\n    icon: \"Icon.80x80\", // Use an appropriate icon if you have one defined in your manifest resources\n    persistent: true, // The message will automatically disappear after a short time\n  });\n\n  try {\n    // 2. Get the email body in HTML format.\n    Office.context.mailbox.item.body.getAsync(\"html\", async (result) => {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        const emailBody = result.value;\n\n        const payload = {\n          email_body: emailBody,\n          // Refine this query as needed for your specific LLM and desired output.\n          query: \"Please reply to this e-mail, ***ONLY OUTPUT THE E-MAIL*** \",\n        };\n\n        let llmResponse = \"⚠️ Could not generate a response from AI.\"; // Default message if LLM fails\n\n        try {\n          // 3. Call your LLM backend API.\n          const res = await fetch(\"http://localhost:8082/api/ask\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(payload),\n          });\n\n          if (!res.ok) {\n            // Handle HTTP errors (e.g., 404, 500)\n            throw new Error(`Server responded with status ${res.status}: ${res.statusText}`);\n          }\n\n          const data = await res.json();\n          // Extract the answer from your LLM's response structure.\n          llmResponse = data.result?.answer || llmResponse;\n\n        } catch (fetchError) {\n          console.error(\"Error calling LLM backend:\", fetchError);\n          llmResponse = `❌ Error communicating with AI: ${fetchError.message}`;\n          // Show an error notification if the LLM call fails\n          Office.context.mailbox.item.notificationMessages.addAsync(\"llmBackendError\", {\n            type: Office.MailboxNotificationMessageType.ErrorMessage,\n            message: llmResponse,\n            icon: \"Icon.80x80\",\n            persistent: true, // Make this error persistent so the user sees it\n          });\n        }\n\n        // 4. Create a new reply form and pre-populate it with the LLM's response.\n        // displayReplyForm handles HTML strings correctly.\n        Office.context.mailbox.item.displayReplyForm(llmResponse);\n\n        // 5. Remove the \"processing\" notification and show a success message.\n        Office.context.mailbox.item.notificationMessages.removeAsync(\"llmProcessing\");\n        Office.context.mailbox.item.notificationMessages.addAsync(\"llmSuccess\", {\n          type: Office.MailboxNotificationMessageType.InformationalMessage,\n          message: \"AI reply draft created!\",\n          icon: \"Icon.80x80\",\n          persistent: false,\n        });\n\n      } else {\n        // Handle failure to get the email body.\n        const errorMessage = `Failed to extract email body: ${result.error.message}`;\n        console.error(errorMessage);\n        Office.context.mailbox.item.notificationMessages.removeAsync(\"llmProcessing\");\n        Office.context.mailbox.item.notificationMessages.addAsync(\"bodyReadError\", {\n          type: Office.MailboxNotificationMessageType.ErrorMessage,\n          message: errorMessage,\n          icon: \"Icon.80x80\",\n          persistent: true,\n        });\n      }\n      // VERY IMPORTANT: Signal to Outlook that the command function has completed its execution.\n      event.completed();\n    });\n  } catch (error) {\n    console.error(\"An unexpected error occurred in AI action:\", error);\n    Office.context.mailbox.item.notificationMessages.removeAsync(\"llmProcessing\");\n    Office.context.mailbox.item.notificationMessages.addAsync(\"unexpectedError\", {\n      type: Office.MailboxNotificationMessageType.ErrorMessage,\n      message: `An unexpected error occurred: ${error.message}`,\n      icon: \"Icon.80x80\",\n      persistent: true,\n    });\n    // Ensure event.completed() is always called, even in case of an unhandled error.\n    event.completed();\n  }\n}\n\n// Register the function with Office.\nOffice.actions.associate(\"action\", generateReplyWithLlmResponse);\n"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","Office","onReady","actions","associate","event","context","mailbox","item","notificationMessages","addAsync","type","MailboxNotificationMessageType","InformationalMessage","message","icon","persistent","body","getAsync","_ref","_callee","result","emailBody","payload","llmResponse","_data$result","res","data","errorMessage","_t","_context","status","AsyncResultStatus","Succeeded","email_body","query","fetch","method","headers","JSON","stringify","ok","Error","concat","statusText","json","answer","console","error","ErrorMessage","displayReplyForm","removeAsync","completed","arguments","apply","_next","_throw","_x"],"sourceRoot":""}